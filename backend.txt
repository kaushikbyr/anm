#!/usr/bin/python
from easysnmp import Session
import time
import datetime
import threading
import sqlite3


class switch_threads(threading.Thread):
    def __init__(self, ip, community, version, port):
        threading.Thread.__init__(self)
        self.ip = ip
        self.community = community
        self.version = version
        self.port = port
        
    def run(self):
        while True:
            failed_attempts = 0
            try:
                session = Session(hostname=self.ip, community = self.community, version = self.version, timeout =5, retries=2)
            except easysnmp.exceptions.EasySNMPTimeoutError:
                failed_attempts = failed_attempts +1 

            
            T = int(time.time())
            Tprobe = datetime.datetime.utcfromtimestamp(T)
            Tnext = Tprobe + datetime.timedelta(seconds=60)
            cnx = sqlite3.Connection('project.db', timeout=10)
            cur = cnx.cursor()
            params = (self.ip, self.port, self.community, self.version, Tprobe, Tnext, failed_attempts, self.ip)
            cur.execute('''UPDATE Status SET IP = ?, PORT = ?, COMMUNITY = ?, VERSION = ?, FIRST_PROBE = ?, LATEST_PROBE = ?, Failed_attempts=? WHERE IP = ? ''', params)

             
            cnx.commit()
            info = session.walk('1.3.6.1.2.1.17.4')
            ports = session.walk('IF-MIB::ifName')
            oidindex_ = []
            out = []

            for i in range(len(info)):
                oid = info[i].oid
                type_ = info[i].snmp_type
                length = len(oid.split('.'))
                if (length >= 12 and  type_ == 'OCTETSTR'):
                    out.append(info[i].value)
        
                if (type_ == 'INTEGER' and "mib-2.17.4.3.1.2" in oid):
        
                    oidindex_.append(info[i].value)

            k = 0
            for k in range(len(oidindex_)):
                if (oidindex_[k] == u'0'):
                    oidindex_[k] = str(1).decode('UTF-8')
            out = [(':'.join('%02x' % ord(b) for b in mac)) for mac in out]
            dict = {}
            for k in range(len(out)):
                dict[out[k]] = oidindex_[k]


            dict_1 = {'index':'port'}
            for port in ports:
                dict_1[port.oidindex] = port.value

            portname = []
            for index in oidindex_:
                if index in dict_1.keys():
                    portname.append(dict_1[index]) 
       
            j = 0
            for name in portname: 
                print "mac address:", out[j], "vlan:", oidindex_[j],"port", name,"\n",  
                cnx.execute("INSERT INTO List VALUES(NULL,?,?,?,?)",(self.ip,oidindex_[j],name,out[j]));           
                j = j + 1
            cnx.commit()
            time.sleep(60)
            
conn = sqlite3.connect('project.db', timeout=10)

c = conn.cursor()
c.execute("CREATE TABLE IF NOT EXISTS list (ID INTEGER PRIMARY KEY AUTOINCREMENT, DEVICE_IP varchar(30), VLAN_ID varchar(30), PORT varchar(30), out varchar(100))")
conn.commit()


length = c.execute("SELECT COUNT(*) FROM Devices")
empty = length.fetchall()
check = str((0,))
q = c.execute("SELECT name FROM sqlite_master WHERE type='table' AND name = 'DEVICES'")
present = len( q.fetchall())           

if str(empty != check) or (present) != 0:
    c.execute("SELECT * FROM Devices")
    device = c.fetchall() 
    threads = []

    for cred in device:    
        ip = cred[1]
        community= cred[2]
        version = int(cred[4])
        port = cred[3]
        thread = switch_threads(ip, community, version, port) 
        thread.start()
        threads.append(thread)
    for t in threads:
        t.join()


